#!/usr/bin/bash

# Only tested for:
# Lenovo Yoga Slim 7i Aura Edition
# KDE Plasma (Wayland) in OpenSUSE Tumbleweed

PATH="/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin"

KBD_BRIGHTNESS_FILE="/sys/class/leds/platform::kbd_backlight/brightness"
SLEEPING=0
WIFI_ENABLED=
BT_ENABLED=
KB_BACKLIGHT=

set -euo pipefail

if [ "$EUID" -eq 0 ]; then
	echo "You shouldn't run this as root." >&2
	exit 1
fi

# Writes to stderr when program isn't available and exits
# Writes to /dev/null when program is available
{ which rfkill && which brightnessctl && which loginctl && which kscreen-doctor || exit 1; } >/dev/null

if [ ! -f "$KBD_BRIGHTNESS_FILE" ] ; then
	echo Could not find the keyboard brightness file.
	exit 1
fi

_is_radio_blocked() {
	if rfkill list "$1" | grep -q "Soft blocked: no"; then
		echo "enabled"
	else
		echo "disabled"
	fi
}

_KBD_BRIGHTNESS=
_set_backlight() {
	# brightnessctl is needed to change the backlight w/o root
	declare -g _KBD_BRIGHTNESS
	_KBD_BRIGHTNESS="$1"
	brightnessctl s "$1" -d "platform::kbd_backlight" >/dev/null
}

_get_backlight() {
	# Sometimes works, sometimes doesn't.
	# Guaranteed to just output `0` after the first read, so cache it instead
	# Now let's hope it doesn't output `0` on the first read...
	if [ "$_KBD_BRIGHTNESS" == "" ]; then
		out=$(brightnessctl g -d platform::kbd_backlight)
		declare -g _KBD_BRIGHTNESS
		_KBD_BRIGHTNESS="$out"
	fi
	echo "$_KBD_BRIGHTNESS"
}

get_pname() {
	if [ "$1" = "" ] || [ "$1" -lt 1 ] || [ "$1" -gt 4194304 ]
	then return
	fi
	ps -p "$1" -o comm=
}

collect_ancestors() {
	pid=$BASHPID
	while [ "$pid" -ne 1 ]; do
		echo "$pid"
		pid=$(ps -o ppid= -p "$pid" | tr -d ' ')
	done
}

get_descendants() {
    local parent=$1
    for child in $(ps -o pid= --ppid "$parent"); do
        echo "$child"
        get_descendants "$child"
    done
}

send_sig() {
	# Rule 1: Do not stop ancestors
	# Rule 2: Do not stop non-user processes
	# Rule 3: Do not stop children processes of $BASHPID

	# Collect all processes at the beginning.
	# This is so we don't accidentally stop new children we create.
	USER_PROCS=$(ps -u "$USER" -o pid=)
	declare -ag KEEP_PID

	echo "$USER_PROCS" | while read -r pid; do
		#pname=$(get_pname "$pid")
		if [[ ! " ${KEEP_PID[*]} " =~ [[:space:]]${pid}[[:space:]] ]]; then
			echo "$pid"
			kill -"$1" "$pid"
		fi
	done
}

_suspend() {
	# Check if already in custom sleep state
	if [ "$SLEEPING" = "1" ]; then
		return 0
	fi

	declare -g SLEEPING
	declare -g KB_BACKLIGHT
	declare -g WIFI_ENABLED
	declare -g BT_ENABLED

	SLEEPING=1
	KB_BACKLIGHT=$(_get_backlight)
	WIFI_ENABLED=$(_is_radio_blocked wifi)
	BT_ENABLED=$(_is_radio_blocked bluetooth)

	rfkill block wifi
	rfkill block bluetooth
	_set_backlight 0
	kscreen-doctor --dpms off
	loginctl lock-session

	sleep 2
	# Rule 1: Do not stop ancestors
	# Rule 2: Do not stop non-user processes
	# Rule 3: Do not stop children processes of $BASHPID

	# Collect all processes at the beginning.
	# This is so we don't accidentally stop new children we create.
	USER_PROCS=$(ps -u "$USER" -o pid=)

	declare -ag KEEP_PID
	KEEP_PID=()
	for child in $(collect_ancestors) 1 $(get_descendants $BASHPID); do
		KEEP_PID+=("$child")
	done

	#send_sig STOP
}

unblock_if_blocked_prev() {
	if [ "$1" == "enabled" ]; then
		rfkill unblock "$2"
	fi
}

_wake() {
	if [ "$SLEEPING" = "0" ]; then
		return 0
	fi

	# Wake everything up first
	#send_sig CONT
	declare -ag KEEP_PID
	KEEP_PID=()

	sleep 1

	kscreen-doctor --dpms on

	unblock_if_blocked_prev "$WIFI_ENABLED" "wifi"
	unblock_if_blocked_prev "$BT_ENABLED" "bluetooth"

	# Restore keyboard backlight
	if [ ! "$KB_BACKLIGHT" = "" ]; then
		_set_backlight "$KB_BACKLIGHT"
	fi
}


# Begin listening for sleep events
while read -r line
do
    case "$line" in
        *"boolean true"*) _suspend;;
        *"boolean false"*) _wake;;
    esac
done < <(dbus-monitor --system "type='signal',path=/org/freedesktop/UPower" 2>&1 | grep --line-buffered -A1 LidIsClosed)

